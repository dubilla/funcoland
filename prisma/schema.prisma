// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(cuid())
  name  String?
  email String @unique
  emailVerified DateTime? @map(name: "email_verified")
  image String?
  password String?
  accounts Account[]
  sessions Session[]
  queues GameQueue[]
  userGames UserGame[]
}

model Account {
  id  String  @id @default(cuid())
  userId String
  user  User  @relation(fields: [userId], references: [id])
}

model Session {
  id  String  @id @default(cuid())
  userId String
  expires DateTime
  sessionToken  String @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user  User  @relation(fields: [userId], references: [id])
}

model Game {
  id              String      @id @default(cuid())
  title           String
  apiId           String?     @unique
  apiSource       String?     // Source of API data (IGDB, RAWG, etc.)
  coverImageUrl   String?
  releaseDate     DateTime?
  publisher       String?
  developer       String?
  description     String?
  hltbMainTime    Int?        // Minutes to beat main story
  hltbCompletionTime Int?     // Minutes for completionist run
  userGames       UserGame[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model UserGame {
  id              String      @id @default(cuid())
  userId          String
  gameId          String
  progressPercent Int         @default(0)  // 0-100
  status          GameStatus  @default(BACKLOG)
  notes           String?
  rating          Int?        // 1-10
  queueId         String?
  queuePosition   Int?
  startedAt       DateTime?
  completedAt     DateTime?
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  game            Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  queue           GameQueue?  @relation(fields: [queueId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@unique([userId, gameId])
}

model GameQueue {
  id              String      @id @default(cuid())
  name            String
  userId          String
  description     String?
  isDefault       Boolean     @default(false)
  games           UserGame[]
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@unique([userId, name])
}

enum GameStatus {
  BACKLOG
  CURRENTLY_PLAYING
  COMPLETED
  ABANDONED
  WISHLIST
}
